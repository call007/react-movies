{"version":3,"sources":["MovieItem.js","utils/api.js","MovieTabs.js","Pagenav.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","item","onDelete","onToggleMovieToWillWatch","useState","isWillWatch","setIsWillWatch","className","src","backdrop_path","alt","title","vote_average","type","onClick","MovieTabs","props","getClassNameLink","value","classNames","active","sort_by","href","e","onClickTabs","Pagenav","current_page","total_pages","onClickPrevPage","onClickNextPage","disabled","App","deleteHandler","movie","updatesMovies","state","movies","filter","id","setState","toggleMovieToWillWatchHandler","updatesWillWatchMovies","moviesWillWatch","includes","handleClickTabs","preventDefault","hashLink","currentTarget","hash","split","handlePrevPage","prevState","handleNextPage","requestServer","fetch","then","response","json","data","results","this","prevProps","map","key","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c63ff33b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport function MovieItem({ item, onDelete, onToggleMovieToWillWatch }) {\r\n  const [isWillWatch, setIsWillWatch] = useState(false);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        className=\"card-img-top\"\r\n        src={\"http://image.tmdb.org/t/p/w500\" + item.backdrop_path}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-title\">{item.title}</h6>\r\n        <div className=\"d-flex justify-content-between align-item-center\">\r\n          <p className=\"mb-0\">Rating {item.vote_average}</p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onToggleMovieToWillWatch();\r\n              setIsWillWatch(!isWillWatch);\r\n            }}\r\n            className={`btn ${isWillWatch ? \"btn-success\" : \"btn-secondary\"}`}\r\n          >\r\n            {isWillWatch ? \"Remove Will Watch\" : \"Add Will Watch\"}\r\n          </button>\r\n          <button type=\"button\" onClick={onDelete} className=\"btn btn-primary\">\r\n            delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\n\nexport const API_KEY_4 =\n  \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nexport const MovieTabs = (props) => {\r\n  const getClassNameLink = (value) =>\r\n    classNames(\"nav-link\", { active: props.sort_by === value });\r\n\r\n  return (\r\n    <ul className=\"tabs nav nav-pills\">\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#popularity.desc\"\r\n          className={getClassNameLink(\"popularity.desc\")}\r\n          onClick={(e) => props.onClickTabs(e)}\r\n        >\r\n          Popularity desc\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#revenue.desc\"\r\n          className={getClassNameLink(\"revenue.desc\")}\r\n          onClick={(e) => props.onClickTabs(e)}\r\n        >\r\n          Revenue desc\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#vote_average.desc\"\r\n          className={getClassNameLink(\"vote_average.desc\")}\r\n          onClick={(e) => props.onClickTabs(e)}\r\n        >\r\n          Vote average\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Pagenav = ({\r\n  current_page,\r\n  total_pages,\r\n  onClickPrevPage,\r\n  onClickNextPage,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-secondary\"\r\n        disabled={current_page === 1}\r\n        onClick={onClickPrevPage}\r\n      >\r\n        Prev\r\n      </button>\r\n      &nbsp; {current_page}/{total_pages} &nbsp;\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-secondary\"\r\n        disabled={current_page === total_pages}\r\n        onClick={onClickNextPage}\r\n      >\r\n        Next\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\n// import { moviesData } from \"./moviesData\";\nimport \"./App.css\";\nimport { MovieItem } from \"./MovieItem\";\nimport { API_URL, API_KEY_3 } from \"./utils/api\";\nimport { MovieTabs } from \"./MovieTabs\";\nimport { Pagenav } from \"./Pagenav\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: \"popularity.desc\",\n      current_page: 1,\n      total_pages: 1,\n    };\n  }\n\n  deleteHandler = (movie) => {\n    const updatesMovies = this.state.movies.filter(\n      (item) => item.id !== movie.id\n    );\n\n    this.setState({\n      movies: updatesMovies,\n    });\n  };\n\n  toggleMovieToWillWatchHandler = (movie) => {\n    let updatesWillWatchMovies;\n\n    if (this.state.moviesWillWatch.includes(movie)) {\n      updatesWillWatchMovies = this.state.moviesWillWatch.filter(\n        (item) => item.id !== movie.id\n      );\n    } else {\n      updatesWillWatchMovies = [...this.state.moviesWillWatch, movie];\n    }\n\n    this.setState({\n      moviesWillWatch: updatesWillWatchMovies,\n    });\n  };\n\n  handleClickTabs = (e) => {\n    e.preventDefault();\n    const hashLink = e.currentTarget.hash.split(\"#\")[1];\n\n    this.setState({\n      sort_by: hashLink,\n    });\n  };\n\n  handlePrevPage = () => {\n    if (this.state.current_page === 1) return;\n\n    this.setState((prevState) => ({\n      current_page: prevState.current_page - 1,\n    }));\n  };\n\n  handleNextPage = () => {\n    if (this.state.current_page === this.state.total_pages) return;\n\n    this.setState((prevState) => ({\n      current_page: prevState.current_page + 1,\n    }));\n  };\n\n  requestServer = () => {\n    fetch(\n      `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.current_page}`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({\n          movies: data.results,\n          total_pages: data.total_pages,\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.requestServer();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    prevState.sort_by !== this.state.sort_by && this.requestServer();\n    prevState.current_page !== this.state.current_page && this.requestServer();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-9\">\n            <div className=\"row\">\n              <div className=\"col-12 mb-4\">\n                <MovieTabs\n                  onClickTabs={this.handleClickTabs}\n                  sort_by={this.state.sort_by}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              {this.state.movies.map((item) => (\n                <div className=\"col-6 mb-4\" key={item.id}>\n                  <MovieItem\n                    item={item}\n                    onDelete={() => this.deleteHandler(item)}\n                    onToggleMovieToWillWatch={() =>\n                      this.toggleMovieToWillWatchHandler(item)\n                    }\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"col-3\">\n            <p>Will Watch: {this.state.moviesWillWatch.length}</p>\n            <Pagenav\n              current_page={this.state.current_page}\n              total_pages={this.state.total_pages}\n              onClickPrevPage={this.handlePrevPage}\n              onClickNextPage={this.handleNextPage}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}